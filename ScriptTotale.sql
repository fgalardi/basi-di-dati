-- MySQL Script generated by MySQL Workbench
-- Fri Jan  5 14:58:58 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
SET GLOBAL event_scheduler = ON;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Formato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Formato` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Formato` (
  `codice` VARCHAR(15) NOT NULL,
  `bitRate` INT NOT NULL,
  `dimensioniFile` INT NOT NULL,
  `qualitaAudio` INT NULL DEFAULT NULL,
  `qualitaVideo` INT NULL DEFAULT NULL,
  `rapportoAspetto` VARCHAR(15) NULL DEFAULT NULL,
  `lunghezzaVideo` INT NULL DEFAULT NULL,
  `versionePrecedente` VARCHAR(15) NULL DEFAULT NULL,
  PRIMARY KEY (`codice`),
  INDEX `fk_Formato_Formato` (`versionePrecedente` ASC) VISIBLE,
  CONSTRAINT `fk_Formato_Formato`
    FOREIGN KEY (`versionePrecedente`)
    REFERENCES `mydb`.`Formato` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Regista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Regista` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Regista` (
  `idRegista` INT NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `cognome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idRegista`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Tipologia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Tipologia` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Tipologia` (
  `Genere` VARCHAR(45) NOT NULL,
  `etaMinima` INT NULL DEFAULT 0,
  PRIMARY KEY (`Genere`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`AreaGeografica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`AreaGeografica` ;

CREATE TABLE IF NOT EXISTS `mydb`.`AreaGeografica` (
  `idAreaGeografica` INT NOT NULL,
  `nomeAreaGeografica` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAreaGeografica`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Film`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Film` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Film` (
  `idFilm` INT NOT NULL AUTO_INCREMENT,
  `titolo` VARCHAR(100) NOT NULL,
  `descrizione` VARCHAR(200) NULL DEFAULT 'Descrizione al momento non disponibile',
  `durata` INT NOT NULL,
  `annoProduzione` INT NOT NULL,
  `rating` INT NULL DEFAULT 0,
  `premiVinti` INT NULL DEFAULT 0,
  `Regista_idRegista` INT NOT NULL,
  `Tipologia_Genere` VARCHAR(45) NOT NULL,
  `Prodotto` INT NOT NULL,
  PRIMARY KEY (`idFilm`),
  INDEX `fk_Film_Regista1` (`Regista_idRegista` ASC) VISIBLE,
  INDEX `fk_Film_Tipologia1` (`Tipologia_Genere` ASC) VISIBLE,
  INDEX `fk_Film_AreaGeografica1_idx` (`Prodotto` ASC) VISIBLE,
  CONSTRAINT `fk_Film_Regista1`
    FOREIGN KEY (`Regista_idRegista`)
    REFERENCES `mydb`.`Regista` (`idRegista`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Film_Tipologia1`
    FOREIGN KEY (`Tipologia_Genere`)
    REFERENCES `mydb`.`Tipologia` (`Genere`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Film_AreaGeografica1`
    FOREIGN KEY (`Prodotto`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Lingua`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Lingua` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Lingua` (
  `nomeLingua` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`nomeLingua`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Attore`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Attore` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Attore` (
  `idAttore` INT NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `cognome` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idAttore`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Premio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Premio` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Premio` (
  `idPremio` INT NOT NULL,
  `nomePremio` VARCHAR(45) NOT NULL,
  `anno` INT NOT NULL,
  `tipo` VARCHAR(45) NOT NULL,
  `attore` INT NULL DEFAULT NULL,
  `regista` INT NULL DEFAULT NULL,
  PRIMARY KEY (`idPremio`),
  INDEX `fk_premio_Attore1` (`attore` ASC) VISIBLE,
  INDEX `fk_premio_Regista1` (`regista` ASC) VISIBLE,
  CONSTRAINT `fk_premio_Attore1`
    FOREIGN KEY (`attore`)
    REFERENCES `mydb`.`Attore` (`idAttore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_premio_Regista1`
    FOREIGN KEY (`regista`)
    REFERENCES `mydb`.`Regista` (`idRegista`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Disponibilita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Disponibilita` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Disponibilita` (
  `nomeLingua` VARCHAR(30) NOT NULL,
  `idFilm` INT NOT NULL,
  PRIMARY KEY (`nomeLingua`, `idFilm`),
  INDEX `fk_Lingua_has_Film_Film1` (`idFilm` ASC) VISIBLE,
  CONSTRAINT `fk_Lingua_has_Film_Lingua1`
    FOREIGN KEY (`nomeLingua`)
    REFERENCES `mydb`.`Lingua` (`nomeLingua`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lingua_has_Film_Film1`
    FOREIGN KEY (`idFilm`)
    REFERENCES `mydb`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`DisponibilitaSottotitoli`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`DisponibilitaSottotitoli` ;

CREATE TABLE IF NOT EXISTS `mydb`.`DisponibilitaSottotitoli` (
  `nomeLingua` VARCHAR(30) NOT NULL,
  `idFilm` INT NOT NULL,
  PRIMARY KEY (`nomeLingua`, `idFilm`),
  INDEX `fk_Lingua_has_Film1_Film1` (`idFilm` ASC) VISIBLE,
  CONSTRAINT `fk_Lingua_has_Film1_Lingua1`
    FOREIGN KEY (`nomeLingua`)
    REFERENCES `mydb`.`Lingua` (`nomeLingua`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Lingua_has_Film1_Film1`
    FOREIGN KEY (`idFilm`)
    REFERENCES `mydb`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Recita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Recita` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Recita` (
  `idFilm` INT NOT NULL,
  `idAttore` INT NOT NULL,
  `ruolo` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`idFilm`, `idAttore`),
  INDEX `fk_Film_has_Attore_Attore1` (`idAttore` ASC) VISIBLE,
  CONSTRAINT `fk_Film_has_Attore_Film1`
    FOREIGN KEY (`idFilm`)
    REFERENCES `mydb`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Film_has_Attore_Attore1`
    FOREIGN KEY (`idAttore`)
    REFERENCES `mydb`.`Attore` (`idAttore`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Server`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Server` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Server` (
  `idServer` INT NOT NULL,
  `larghezzaBanda` VARCHAR(45) NULL DEFAULT 0,
  `capacitaTrasmissioneMax` VARCHAR(45) NOT NULL,
  `AreaGeografica_idAreaGeografica` INT NOT NULL,
  PRIMARY KEY (`idServer`),
  INDEX `fk_Server_AreaGeografica1` (`AreaGeografica_idAreaGeografica` ASC) VISIBLE,
  CONSTRAINT `fk_Server_AreaGeografica1`
    FOREIGN KEY (`AreaGeografica_idAreaGeografica`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Dista`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Dista` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Dista` (
  `idAreaGeograficaA` INT NOT NULL,
  `idAreaGeograficaB` INT NOT NULL,
  `distanza` INT NULL DEFAULT 0,
  PRIMARY KEY (`idAreaGeograficaA`, `idAreaGeograficaB`),
  INDEX `fk_AreaGeografica_has_AreaGeografica_AreaGeografica2` (`idAreaGeograficaB` ASC) VISIBLE,
  CONSTRAINT `fk_AreaGeografica_has_AreaGeografica_AreaGeografica1`
    FOREIGN KEY (`idAreaGeograficaA`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AreaGeografica_has_AreaGeografica_AreaGeografica2`
    FOREIGN KEY (`idAreaGeograficaB`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`NonFruibile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`NonFruibile` ;

CREATE TABLE IF NOT EXISTS `mydb`.`NonFruibile` (
  `codice` VARCHAR(15) NOT NULL,
  `idAreaGeografica` INT NOT NULL,
  PRIMARY KEY (`codice`, `idAreaGeografica`),
  INDEX `fk_Formato_has_AreaGeografica_AreaGeografica1` (`idAreaGeografica` ASC) VISIBLE,
  CONSTRAINT `fk_Formato_has_AreaGeografica_Formato1`
    FOREIGN KEY (`codice`)
    REFERENCES `mydb`.`Formato` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Formato_has_AreaGeografica_AreaGeografica1`
    FOREIGN KEY (`idAreaGeografica`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Abbonamento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Abbonamento` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Abbonamento` (
  `nome` VARCHAR(10) NOT NULL,
  `tariffaMensile` INT NOT NULL,
  `descrizione` VARCHAR(45) NOT NULL,
  `durata` INT NOT NULL,
  `maxOre` INT NOT NULL,
  `maxGiga` INT NOT NULL,
  PRIMARY KEY (`nome`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PuoVedereTipologia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`PuoVedereTipologia` ;

CREATE TABLE IF NOT EXISTS `mydb`.`PuoVedereTipologia` (
  `Genere` VARCHAR(45) NOT NULL,
  `nomeAbbonamento` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`Genere`, `nomeAbbonamento`),
  INDEX `fk_Tipologia_has_Abbonamento_Abbonamento1` (`nomeAbbonamento` ASC) VISIBLE,
  CONSTRAINT `fk_Tipologia_has_Abbonamento_Tipologia1`
    FOREIGN KEY (`Genere`)
    REFERENCES `mydb`.`Tipologia` (`Genere`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Tipologia_has_Abbonamento_Abbonamento1`
    FOREIGN KEY (`nomeAbbonamento`)
    REFERENCES `mydb`.`Abbonamento` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Cliente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Cliente` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Cliente` (
  `idCliente` INT NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `nome` VARCHAR(45) NOT NULL,
  `cognome` VARCHAR(45) NOT NULL,
  `idAreaGeografica` INT NOT NULL,
  `critico` TINYINT(1) NULL DEFAULT 0,
  `eta` INT NOT NULL,
  PRIMARY KEY (`idCliente`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  INDEX `fk_Cliente_AreaGeografica1` (`idAreaGeografica` ASC) VISIBLE,
  CONSTRAINT `fk_Cliente_AreaGeografica1`
    FOREIGN KEY (`idAreaGeografica`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`VisualizzaNumero`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`VisualizzaNumero` ;

CREATE TABLE IF NOT EXISTS `mydb`.`VisualizzaNumero` (
  `Cliente` INT NOT NULL,
  `Film` INT NOT NULL,
  `nVolte` INT NOT NULL DEFAULT 0,
  `recensione` INT NULL DEFAULT NULL,
  PRIMARY KEY (`Cliente`, `Film`),
  INDEX `fk_Cliente_has_Film_Film1` (`Film` ASC) VISIBLE,
  CONSTRAINT `fk_Cliente_has_Film_Cliente1`
    FOREIGN KEY (`Cliente`)
    REFERENCES `mydb`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cliente_has_Film_Film1`
    FOREIGN KEY (`Film`)
    REFERENCES `mydb`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Abbonato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Abbonato` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Abbonato` (
  `idCliente` INT NOT NULL,
  `nomeAbbonamento` VARCHAR(10) NOT NULL,
  `dataInizio` DATE NOT NULL,
  `pagato` TINYINT(1) NULL DEFAULT 0,
  `cartaDiCredito` VARCHAR(45) NULL DEFAULT NULL,
  `idFattura` INT NULL DEFAULT NULL,
  `dataScadenza` DATE NULL DEFAULT NULL,
  `dataPagamento` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`idCliente`, `nomeAbbonamento`, `dataInizio`),
  INDEX `fk_Cliente_has_Abbonamento_Abbonamento1` (`nomeAbbonamento` ASC) VISIBLE,
  CONSTRAINT `fk_Cliente_has_Abbonamento_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `mydb`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cliente_has_Abbonamento_Abbonamento1`
    FOREIGN KEY (`nomeAbbonamento`)
    REFERENCES `mydb`.`Abbonamento` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PuoVedereAreaGeografica`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`PuoVedereAreaGeografica` ;

CREATE TABLE IF NOT EXISTS `mydb`.`PuoVedereAreaGeografica` (
  `nomeAbbonamento` VARCHAR(10) NOT NULL,
  `idAreaGeografica` INT NOT NULL,
  PRIMARY KEY (`nomeAbbonamento`, `idAreaGeografica`),
  INDEX `fk_Abbonamento_has_AreaGeografica_AreaGeografica1` (`idAreaGeografica` ASC) VISIBLE,
  CONSTRAINT `fk_Abbonamento_has_AreaGeografica_Abbonamento1`
    FOREIGN KEY (`nomeAbbonamento`)
    REFERENCES `mydb`.`Abbonamento` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Abbonamento_has_AreaGeografica_AreaGeografica1`
    FOREIGN KEY (`idAreaGeografica`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Ip`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Ip` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Ip` (
  `ipv4` VARCHAR(17) NOT NULL,
  `disponibile` TINYINT(1) NULL DEFAULT 0,
  `AreaGeografica_idAreaGeografica` INT NOT NULL,
  PRIMARY KEY (`ipv4`),
  INDEX `fk_Ip_AreaGeografica1` (`AreaGeografica_idAreaGeografica` ASC) VISIBLE,
  CONSTRAINT `fk_Ip_AreaGeografica1`
    FOREIGN KEY (`AreaGeografica_idAreaGeografica`)
    REFERENCES `mydb`.`AreaGeografica` (`idAreaGeografica`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Dispositivo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Dispositivo` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Dispositivo` (
  `tipoDispositivo` VARCHAR(30) NOT NULL,
  PRIMARY KEY (`tipoDispositivo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Connessione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Connessione` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Connessione` (
  `dataInizio` DATETIME NOT NULL,
  `ip` VARCHAR(17) NOT NULL,
  `tipoDispositivo` VARCHAR(30) NOT NULL,
  `idCliente` INT NOT NULL,
  `dataFine` VARCHAR(45) NULL DEFAULT NULL,
  `idServer` INT NULL DEFAULT NULL,
  PRIMARY KEY (`dataInizio`, `ip`, `tipoDispositivo`, `idCliente`),
  INDEX `fk_Connessione_Ip1` (`ip` ASC) VISIBLE,
  INDEX `fk_Connessione_Dispositivo1` (`tipoDispositivo` ASC) VISIBLE,
  INDEX `fk_Connessione_Cliente1` (`idCliente` ASC) VISIBLE,
  INDEX `fk_Connessione_Server1` (`idServer` ASC) VISIBLE,
  CONSTRAINT `fk_Connessione_Ip1`
    FOREIGN KEY (`ip`)
    REFERENCES `mydb`.`Ip` (`ipv4`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Connessione_Dispositivo1`
    FOREIGN KEY (`tipoDispositivo`)
    REFERENCES `mydb`.`Dispositivo` (`tipoDispositivo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Connessione_Cliente1`
    FOREIGN KEY (`idCliente`)
    REFERENCES `mydb`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Connessione_Server1`
    FOREIGN KEY (`idServer`)
    REFERENCES `mydb`.`Server` (`idServer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`FilmConFormato`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`FilmConFormato` ;

CREATE TABLE IF NOT EXISTS `mydb`.`FilmConFormato` (
  `Film` INT NOT NULL,
  `FormatoAudio` VARCHAR(15) NOT NULL,
  `FormatoVideo` VARCHAR(15) NOT NULL,
  `dataRilascioAudio` DATETIME NULL DEFAULT NULL,
  `peso` INT NULL DEFAULT NULL,
  `dataRilascioVideo` DATETIME NULL DEFAULT NULL,
  `dataRilascio` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`Film`, `FormatoAudio`, `FormatoVideo`),
  INDEX `fk_FilmConFormato_Formato1` (`FormatoAudio` ASC) VISIBLE,
  INDEX `fk_FilmConFormato_Formato2` (`FormatoVideo` ASC) VISIBLE,
  CONSTRAINT `fk_table1_Film1`
    FOREIGN KEY (`Film`)
    REFERENCES `mydb`.`Film` (`idFilm`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FilmConFormato_Formato1`
    FOREIGN KEY (`FormatoAudio`)
    REFERENCES `mydb`.`Formato` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FilmConFormato_Formato2`
    FOREIGN KEY (`FormatoVideo`)
    REFERENCES `mydb`.`Formato` (`codice`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Visualizza`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Visualizza` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Visualizza` (
  `Server` INT NOT NULL,
  `Cliente` INT NOT NULL,
  `data` DATETIME NOT NULL,
  `Film` INT NOT NULL,
  `FormatoAudio` VARCHAR(15) NOT NULL,
  `FormatoVideo` VARCHAR(15) NOT NULL,
  `datafine` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`Server`, `Cliente`, `data`, `Film`, `formatoAudio`, `formatoVideo`),
  INDEX `fk_Film_has_Server_Cliente1` (`Cliente` ASC) VISIBLE,
  INDEX `fk_Visualizza_FilmConFormato1` (`Film` ASC, `FormatoAudio` ASC, `FormatoVideo` ASC) VISIBLE,
  CONSTRAINT `fk_Film_has_Server_Server2`
    FOREIGN KEY (`Server`)
    REFERENCES `mydb`.`Server` (`idServer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Film_has_Server_Cliente1`
    FOREIGN KEY (`Cliente`)
    REFERENCES `mydb`.`Cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Visualizza_FilmConFormato1`
    FOREIGN KEY (`Film` , `FormatoAudio` , `FormatoVideo`)
    REFERENCES `mydb`.`FilmConFormato` (`Film` , `FormatoAudio` , `FormatoVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Funzionalita`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Funzionalita` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Funzionalita` (
  `idFunzionalita` INT NOT NULL,
  `caratteristica` VARCHAR(300) NULL DEFAULT NULL,
  PRIMARY KEY (`idFunzionalita`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Comprende`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Comprende` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Comprende` (
  `nomeAbbonamento` VARCHAR(10) NOT NULL,
  `funzionalita` INT NOT NULL,
  PRIMARY KEY (`nomeAbbonamento`, `funzionalita`),
  INDEX `fk_Abbonamento_has_Funzionalita_Funzionalita1` (`funzionalita` ASC) VISIBLE,
  CONSTRAINT `fk_Abbonamento_has_Funzionalita_Abbonamento1`
    FOREIGN KEY (`nomeAbbonamento`)
    REFERENCES `mydb`.`Abbonamento` (`nome`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Abbonamento_has_Funzionalita_Funzionalita1`
    FOREIGN KEY (`funzionalita`)
    REFERENCES `mydb`.`Funzionalita` (`idFunzionalita`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Contiene`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Contiene` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Contiene` (
  `Server` INT NOT NULL,
  `Film` INT NOT NULL,
  `FormatoAudio` VARCHAR(15) NOT NULL,
  `FormatoVideo` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`Server`, `Film`, `FormatoAudio`, `FormatoVideo`),
  INDEX `fk_Server_has_FilmConFormato_FilmConFormato1` (`Film` ASC, `FormatoAudio` ASC, `FormatoVideo` ASC) VISIBLE,
  CONSTRAINT `fk_Server_has_FilmConFormato_Server1`
    FOREIGN KEY (`Server`)
    REFERENCES `mydb`.`Server` (`idServer`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Server_has_FilmConFormato_FilmConFormato1`
    FOREIGN KEY (`Film` , `FormatoAudio` , `FormatoVideo`)
    REFERENCES `mydb`.`FilmConFormato` (`Film` , `FormatoAudio` , `FormatoVideo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- procedure aggiungiFilmConFormato
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`aggiungiFilmConFormato`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `aggiungiFilmConFormato`(in Titolo varchar(100), in formA varchar(15), in formV varchar(15))
BEGIN

declare quantif integer default 0;
declare quantiV integer default 0;
declare quantiA integer default 0;
declare pesoA integer default 0;
declare pesoV integer default 0;
declare peso integer default 0;
declare dataA datetime;
declare dataV datetime;
declare film integer default 0;
set film = (
	select f.idFilm
    From Film f
    Where f.Titolo = Titolo
    Limit 1
);

set dataV = 
(
	SELECT f.dataRilascioVideo
	FROM FilmConFormato f
	WHERE f.FormatoVideo = formV 
		AND f.Film = film 
	ORDER BY f.dataRilascioVideo DESC
	Limit 1      
);

set dataA = 
(
	SELECT f.dataRilascioAudio
	FROM FilmConFormato f
	WHERE f.FormatoAudio = formA 
		AND f.Film = film 
	ORDER BY f.dataRilascioAudio DESC
	Limit 1      
);



set quantif =
(
	select count(*)
	from Film f
	where f.idFilm = film
    Limit 1
);
set quantiA =
(
	select count(*)
	from Formato f
	where f.codice = formA and f.qualitaAudio is not null
);
set pesoA =
(
	select f.dimensioniFile
	from Formato f
	where f.codice = formA and f.qualitaAudio is not null
);
set quantiV =
(
	select count(*)
	from Formato f
	where f.codice = formV and f.qualitaVideo is not null
);
set pesoV =
(
	select f.dimensioniFile
	from Formato f
	where f.codice = formV and f.qualitaVideo is not null
);

if dataA is null then
	set dataA = current_timestamp();
end if;
if dataV is null then
	set dataV = current_timestamp();
end if;    
set peso = pesoA+pesoV;
if quantif > 0 and quantiA > 0 and quantiV > 0 then
	insert into FilmConFormato
	values(film,formA,formV,dataA,peso,dataV, current_timestamp());
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure BilanciamentoCosti
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`BilanciamentoCosti`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `BilanciamentoCosti`()
BEGIN
with calcolaMoltiplicatori as(
	Select a.nome,rank() over (order by a.tariffaMensile)*2/5 as moltiplicatore
	From Abbonamento a

),
	nTipologie as (
		Select t.nomeAbbonamento, count(*) as contaTipologie
		From PuoVedereTipologia t
		group by t.nomeAbbonamento
),
	 nFilm as (
	Select a.nomeAbbonamento, count(*) as contaFilm
	From Visualizza v inner join Abbonato a
	on v.Cliente = a.idCliente
	where a.dataScadenza > current_timestamp() AND v.data > CURRENT_TIMESTAMP() - INTERVAL 1 MONTH
	group by a.nomeAbbonamento     
),
nFunzionalita as (
		Select c.nomeAbbonamento as nAbb, count(*) as contaFunzionalita
        From Comprende c
        Group by c.nomeAbbonamento
),
    stampaIndicatori as (
	Select nomeAbbonamento, (b.contaFilm/(a.contaTipologie*c.tariffaMensile*f.contaFunzionalita)) as indicatore
	From nTipologie a Natural join nFilm b inner join Abbonamento c on a.nomeAbbonamento = c.nome
					  inner join nFunzionalita f on c.nome = f.nAbb
),
	
	calcolaIndici as (
Select c.nomeAbbonamento, c.indicatore, ( Select Avg(f.indicatore)
											From stampaIndicatori f
										) as Media
                
from stampaIndicatori c
order by c.indicatore desc

)
Select c.nomeAbbonamento, c.indicatore, c.media, a.tariffaMensile, ( Select n.contafilm
													From nFilm n 
                                                    where n.NomeAbbonamento = c.NomeAbbonamento) / 
                                                    ((
														Select n.contaTipologie
														From nTipologie n 
														where n.NomeAbbonamento = c.NomeAbbonamento
                                                    )* c.media) * (Select g.moltiplicatore
																	From calcolaMoltiplicatori g
                                                                    Where g.nome=c.NomeAbbonamento
                                                                    )* (
																		Select x.durata/30
																		From Abbonamento x 
                                                                        Where x.nome = c.NomeAbbonamento
                                                                    )
                                                                    as costoProposto
From calcolaIndici c inner join Abbonamento a on c.nomeAbbonamento = a.nome;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure caching
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`caching`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `caching`(in idClienteIN integer)
BEGIN

declare finito integer default 0;
declare FA varchar(15) default '';
declare FV varchar(15) default '';
declare filmAus integer default 0;
declare distAus integer default 0;
declare conta integer default 0;
declare serverAus integer default 0;
declare posso integer default 0;

declare cursoreServer cursor for (
	select s.idServer, rank() over (order by d.distanza) as Distanza
	from  Cliente c inner join Dista d on c.idAreaGeografica = d.idAreaGeograficaA
			inner join Server s on d.idAreaGeograficaB = s.AreaGeografica_idAreaGeografica
	where c.idCliente = idClienteIN and s.larghezzaBanda + (select mydb.SUMFilmDaInserire2(idClienteIN)) < s.capacitaTrasmissioneMax * 0.95
	limit 2
);
declare cursoreFilm1 cursor for (

(

with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)


		(Select G.idFilm, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
	)
);
declare cursoreFilmDefault cursor for (
	with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

Select h.idFilm, r.FormatoAudio, r.FormatoVideo
From (	Select distinct f.idFilm, f.rating
		From FilmVisibili f
	) as F  inner join RankFormati r on F.idFilm = r.Film
			inner join Film h on h.idFilm = F.idFilm
Where r.Riga = 1 and F.idFilm not in (Select v.Film From VisualizzaNumero v where v.Cliente = idClienteIN)
order by h.rating DESC
limit 5
);

declare continue handler for not found
set finito = 1;
 
set posso = (

with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

		select count(*)
        From 
		((Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)) as H



);

if posso != 0 then 
open cursoreServer;
open cursoreFilm1;
scan:       loop
             fetch cursoreServer into serverAus,distAus;
             if finito = 1 then
             leave scan;
             end if;
scan2:       loop
			 fetch cursoreFilm1 into filmAus, FA,FV;
             if finito = 1 then
             leave scan2;
             end if;
             insert into Contiene
             values(serverAus,filmAus,FA,FV);
             end loop scan2;
             set finito = 0;
             end loop scan;
end if;


if posso = 0 then
open cursoreServer;
open cursoreFilmDefault;
ciclo:       loop
             fetch cursoreServer into serverAus,distAus;
             if finito = 1 then
             leave ciclo;
             end if;
ciclo2:       loop
			 fetch cursoreFilmDefault  into filmAus, FA,FV;
             if finito = 1 then
             leave ciclo2;
             end if;
             insert into Contiene
             values(serverAus,filmAus,FA,FV);
             end loop ciclo2;
             set finito = 0;
             end loop ciclo;
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure PagaAbbonamento
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`PagaAbbonamento`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PagaAbbonamento`(in id_cliente integer, in abbonamento varchar(10), in carta_di_credito varchar(45))
BEGIN
Declare quanti integer default 0;
declare durata integer default 0;
set quanti = (	Select count(*)
				From Abbonato a
				Where a.idCliente = id_cliente  and a.pagato = 0 and a.dataScadenza>current_timestamp()
                );
set durata = (	Select b.durata
				From Abbonamento b
                Where b.nome = abbonamento);
                
if( quanti > 0) then -- Caso in cui ci sia un abbonamento sottoscritto non pagato (possiamo cambiare piano di abbonamento)
	update Abbonato a
    SET a.pagato = 1, a.nomeAbbonamento = abbonamento, a.dataInizio = current_date(), a.idFattura = (FLOOR(RAND() * 9000000000) + 1000000000), a.dataScadenza = DATE_ADD(current_date(), INTERVAL durata DAY), a.dataPagamento = current_timestamp()
    WHERE a.idCliente = id_cliente  and a.pagato = 0 and a.dataScadenza>current_date();
else
	INSERT INTO Abbonato(idCliente, nomeAbbonamento, dataInizio, pagato, cartaDiCredito, idFattura, dataScadenza, dataPagamento) 
				VALUES (id_cliente, abbonamento, current_date(), 1,carta_di_credito, (FLOOR(RAND() * 900000) + 100000), (DATE_ADD(current_date(), INTERVAL durata DAY)), current_date());
end if;            
END $$

-- -----------------------------------------------------
-- procedure classifica0
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica0`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica0`()
BEGIN
	Select f.titolo, v.FormatoAudio, v.FormatoVideo , a.nomeAbbonamento, count(*) as nVolte
	From Film f inner join Visualizza v on f.idFilm = v.Film inner join Abbonato a on v.Cliente = a.idCliente
	where a.dataScadenza > current_timestamp()
	group by f.titolo, v.FormatoAudio, v.FormatoVideo, a.nomeAbbonamento
	order by a.nomeAbbonamento, count(*) desc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure classifica1
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica1`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica1`()
BEGIN
Select f.titolo, v.FormatoAudio, v.FormatoVideo , a.nomeAreaGeografica, count(*) as nVolte
From Film f inner join Visualizza v on f.idFilm = v.Film inner join Cliente c on v.Cliente = c.idCliente inner join AreaGeografica a on c.idAreaGeografica = a.idAreaGeografica
group by f.titolo, v.FormatoAudio, v.FormatoVideo, a.nomeAreaGeografica
order by a.nomeAreaGeografica, count(*) desc;
END$$

DELIMITER ;
-- -----------------------------------------------------
-- procedure classifica2
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica2`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica2`()
BEGIN
	Select f.titolo,  a.nomeAbbonamento, SUM(v.nVolte) as nVolte
	From Film f inner join VisualizzaNumero v on f.idFilm = v.Film inner join Abbonato a on v.Cliente = a.idCliente
	where a.dataScadenza > current_timestamp()	
	group by f.titolo, a.nomeAbbonamento
	order by a.nomeAbbonamento, SUM(v.nVolte) desc;
END $$
DELIMITER ;

-- -----------------------------------------------------
-- procedure classifica3
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica3`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica3`()
BEGIN
Select f.titolo , a.nomeAreaGeografica, SUM(v.nVolte) as nVolte
From Film f inner join VisualizzaNumero v on f.idFilm = v.Film inner join Cliente c on v.Cliente = c.idCliente inner join AreaGeografica a on c.idAreaGeografica = a.idAreaGeografica
group by f.titolo, a.nomeAreaGeografica
order by a.nomeAreaGeografica, SUM(v.nVolte) desc;
END $$
DELIMITER ;

-- -----------------------------------------------------
-- procedure classifica4
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica4`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica4`()
BEGIN
Select v.FormatoAudio,  a.nomeAbbonamento, count(*) as nVolte
From Film f inner join Visualizza v on f.idFilm = v.Film inner join Abbonato a on v.Cliente = a.idCliente
where a.dataScadenza > current_timestamp()
group by  v.FormatoAudio, a.nomeAbbonamento
order by a.nomeAbbonamento, count(*) desc;
END $$
DELIMITER ;


-- -----------------------------------------------------
-- procedure classifica5
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica5`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica5`()
BEGIN
Select  v.FormatoAudio, a.nomeAreaGeografica, count(*) as nVolte
From Film f inner join Visualizza v on f.idFilm = v.Film inner join Cliente c on v.Cliente = c.idCliente inner join AreaGeografica a on c.idAreaGeografica = a.idAreaGeografica
group by v.FormatoAudio, a.nomeAreaGeografica
order by a.nomeAreaGeografica, count(*) desc;
END $$
DELIMITER ;


-- -----------------------------------------------------
-- procedure classifica6
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica6`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica6`()
BEGIN
Select v.FormatoVideo,  a.nomeAbbonamento, count(*) as nVolte
From Film f inner join Visualizza v on f.idFilm = v.Film inner join Abbonato a on v.Cliente = a.idCliente
where a.dataScadenza > current_timestamp()
group by  v.FormatoVideo, a.nomeAbbonamento
order by a.nomeAbbonamento, count(*) desc;
END $$
DELIMITER ;


-- -----------------------------------------------------
-- procedure classifica7
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`classifica7`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `classifica7`()
BEGIN
Select  v.FormatoVideo, a.nomeAreaGeografica, count(*) as nVolte
From Film f inner join Visualizza v on f.idFilm = v.Film inner join Cliente c on v.Cliente = c.idCliente inner join AreaGeografica a on c.idAreaGeografica = a.idAreaGeografica
group by v.FormatoVideo, a.nomeAreaGeografica
order by a.nomeAreaGeografica, count(*) desc;
END $$
DELIMITER ;


-- -----------------------------------------------------
-- procedure Classifiche
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`Classifiche`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Classifiche`(in input integer)
BEGIN
if(input < 8) then
CASE input
        WHEN 0 THEN call classifica0;
        WHEN 1 THEN call classifica1;
        WHEN 2 THEN call classifica2;
        WHEN 3 THEN call classifica3;
        WHEN 4 THEN call classifica4;
        WHEN 5 THEN call classifica5;
        WHEN 6 THEN call classifica6;
        WHEN 7 THEN call classifica7;
    END CASE;
end if;    
END $$
DELIMITER ;

-- -----------------------------------------------------
-- procedure fineGuardaFilm
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`fineGuardaFilm`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `fineGuardaFilm`(in cliente integer)
BEGIN
declare filmAlMomento integer default null;
set filmAlMomento = 
(
	select v.film
	from Visualizza v
	where v.Cliente = cliente and datafine is null
	limit 1
);
update Visualizza v
set v.datafine = current_timestamp()
where v.Cliente = cliente and Film = filmAlMomento and datafine is null;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure guardaFilm
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`guardaFilm`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `guardaFilm`(IN id_cliente INTEGER, IN Titolo VARCHAR(100), formA VARCHAR(15), formV VARCHAR(15))
BEGIN
    DECLARE quantiC INTEGER DEFAULT 0;
    DECLARE quantiF INTEGER DEFAULT 0;
    DECLARE quanti INTEGER DEFAULT 0;
    DECLARE quanteVisualizzazioni INTEGER DEFAULT 0;
    DECLARE serverA INTEGER DEFAULT 0;
    DECLARE pesoFilm integer default 0; 
    DECLARE contenuto integer default 0;
    DECLARE durataFilm integer default 0;
    DECLARE fil integer default 0;
    
    set fil = (
	 Select f.idFilm
     From Film f
     Where f.Titolo = Titolo
     Limit 1
    );
    
    SET quanteVisualizzazioni = (
        SELECT vn.nVolte
        FROM VisualizzaNumero vn
        WHERE vn.Cliente = id_cliente AND vn.Film = fil
    );
    
    SET quanti = (
        SELECT COUNT(*)
        FROM Connessione
        WHERE idCliente = id_cliente AND dataFine IS NULL
    );
    
    SET quantiC = (
        SELECT COUNT(*)
        FROM Cliente c
        WHERE c.idCliente = id_cliente
    );
    
    SET quantiF = (
        SELECT COUNT(*)
		FROM FilmConFormato f inner join Film x on f.Film = x.idFilm 
							  inner join Tipologia q on x.Tipologia_Genere = q.Genere
							  inner join PuoVedereTipologia t on x.Tipologia_Genere = t.Genere
							  inner join Abbonato c on t.nomeAbbonamento = c.nomeAbbonamento
                              inner join Cliente v on c.idCliente = v.idCliente
		WHERE f.Film = fil and f.FormatoAudio = formA and f.FormatoVideo = formV and c.idCliente = id_cliente and c.dataScadenza > current_date() and x.Prodotto in (
																																										Select p.idAreaGeografica
                                                                                                                                                                        From Abbonato a inner join PuoVedereAreaGeografica p on a.nomeAbbonamento = p.nomeAbbonamento
                                                                                                                                                                        Where a.idCliente = id_cliente and a.dataScadenza > current_timestamp() and a.pagato = 1
																																										 	
																																									)
						   and f.FormatoAudio not in ( 	Select p.codice
														From AreaGeografica g 
																		   inner join NonFruibile p  on g.idAreaGeografica = p.idAreaGeografica 
                                                                           inner join Cliente k on k.idAreaGeografica = p.idAreaGeografica 
																		   inner join Abbonato y on y.idCliente = k.idCliente
														Where k.idCliente = id_cliente and y.dataScadenza  > current_date() and y.pagato = 1
														)		
							and f.FormatoVideo not in (
														Select p.codice
														From AreaGeografica g 
																		   inner join NonFruibile p  on g.idAreaGeografica = p.idAreaGeografica 
                                                                           inner join Cliente k on k.idAreaGeografica = p.idAreaGeografica 
																		   inner join Abbonato y on y.idCliente = k.idCliente
														Where k.idCliente = id_cliente and y.dataScadenza  > current_date() and y.pagato = 1
													)     
							 and ((q.etaMinima is not null and  q.etaMinima < v.eta) OR q.etaMinima is NULL )
    );
    
    set pesoFilm = (
		Select f.peso
        from FilmConFormato f
        where f.Film = fil and f.FormatoAudio = formA and f.FormatoVideo = formV
		limit 1
    );
        
    SET serverA = trovaServer(id_cliente, fil, formA, formV, pesoFilm);
	
    set contenuto = (
		SELECT count(*)
        FROM Contiene c
        WHERE c.Server = serverA and c.Film = fil and c.FormatoAudio = formA and c.FormatoVideo = formV
    );
    SET durataFilm = (
						Select f.durata
                        From Film f
                        Where f.idFilm = fil
    );    
    IF (quantiC != 0 AND quantiF != 0 AND quanti != 0 AND puoVedere(id_cliente, pesoFilm, durataFilm) = 1) THEN
        UPDATE Connessione
        SET idServer = serverA
        WHERE idCliente = id_cliente AND dataFine IS NULL;
        IF contenuto = 0 then
			Insert into Contiene
			VALUES (serverA,fil,formA,formV); #ci entrerà sicuramente vedi trovaServer
        END IF;
        IF quanteVisualizzazioni > 0 THEN
                UPDATE VisualizzaNumero
                SET nVolte = nVolte + 1
                WHERE Cliente = id_cliente AND Film = fil;
            ELSE
                INSERT INTO VisualizzaNumero
                VALUES (id_cliente, fil, 1, NULL);
            END IF;
        INSERT INTO Visualizza
            VALUES (serverA, id_cliente, current_timestamp(), fil, formA, formV, NULL);    
        END IF;
END $$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Login
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`Login`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Login`(in mail varchar(45), in pass varchar(45), in disp varchar(30))
BEGIN
declare clien integer default 0;
declare quanti integer default 0;
declare ip varchar(17) default '';
set clien =
(
	select idCliente
	from Cliente c
	where c.email = mail and c.password = pass
);

set ip = trovaip(clien);
if (conness(clien) = 0 and ip is not null) then
	insert into Connessione
	values(current_timestamp(),ip,disp,clien,null,null);
    
    update Ip p
    set p.disponibile = 1
    where p.ipv4 = ip;
    call caching(clien);
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Logout
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`Logout`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Logout`(in cliente integer)
BEGIN
declare quanti integer default 0;
declare ip varchar(17);
set quanti = 
(
	select count(*)
	from Connessione
	where idCliente = cliente and datafine is null
);
set ip = (
	select c.ip
    from Connessione c
    where c.idCliente = cliente and c.datafine is null
);

if quanti > 0 then 

	update Connessione
	set datafine = current_timestamp()
	where idCliente = cliente and datafine is null;
    
    update Visualizza v
    set v.dataFine = current_timestamp()
    where v.Cliente = cliente and v.dataFine is null;

	update Ip p
    set p.disponibile = 0
    where p.ipv4 = ip;
    
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RaccomandazioneContenuti
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`RaccomandazioneContenuti`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `RaccomandazioneContenuti`(in idClienteIN int)
BEGIN

DECLARE posso integer;

set posso = (

with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

		select count(*)
        From 
		((Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)) as H



);
IF posso !=0 then
(


with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)


		(Select h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)



);
else 
	(
	with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
),
RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

Select h.titolo, r.FormatoAudio, r.FormatoVideo
From (	Select distinct f.idFilm, f.rating
		From FilmVisibili f
	) as F  inner join RankFormati r on F.idFilm = r.Film
			inner join Film h on h.idFilm = F.idFilm
Where r.Riga = 1 and F.idFilm not in (Select v.Film From VisualizzaNumero v where v.Cliente = idClienteIN)
order by h.rating DESC
limit 5
    );
end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure Recensione
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`Recensione`;
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Recensione`(in id_cliente integer, in Titolo varchar(100), in voto integer)
BEGIN
	IF (voto<=10 and voto>=0) then
		Update VisualizzaNumero v inner join Film f on v.Film = f.idFilm
		SET v.recensione = voto
		WHERE v.Cliente = id_cliente and f.titolo = Titolo;
    END IF;    
END $$
-- -----------------------------------------------------
-- procedure RatingAusiliaria
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`RatingAusiliaria`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `RatingAusiliaria`()
BEGIN
declare film integer default 0;
declare voto integer default 0;
declare finito integer default 0;
declare cursore cursor for
Select f.idFilm, LEAST(10, p.voto + f.premiVinti * 0.1)
from Film f inner join
(Select D.Film as Film, LEAST(10, AVG(D.rating)) as voto
From			((select v.Film, avg(v.recensione) * 0.8 as rating
				from VisualizzaNumero v inner join Cliente c on v.Cliente = c.idCliente
				where c.critico = 0
					and v.recensione is not null
				group by v.Film
				)
				UNION
				(
				select v.Film, avg(v.recensione) * 1.2 as rating 
				from VisualizzaNumero v inner join Cliente c on v.Cliente = c.idCliente
				where c.critico = 1
					and v.recensione is not null
				group by v.Film
				) )as D
 group by D.Film) AS p on f.idFilm = p.Film;
 declare continue handler for not found
 set finito = 1;
 open cursore;
 scan:       loop
             fetch cursore into film,voto;
             if finito = 1 then
             leave scan;
             end if;
             update Film
             set rating = voto
             where idFilm = film;
             end loop scan;
close cursore;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure svuotaServerAus
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`svuotaServerAus`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `svuotaServerAus`()
BEGIN
WITH filmAttivi AS (
    SELECT v.Server, v.Film, v.FormatoAudio, v.FormatoVideo
    FROM Visualizza v
    WHERE v.dataFine IS NULL
),
	filmDaEliminare as(
(SELECT *
FROM Contiene c
WHERE NOT EXISTS (
    SELECT *
    FROM filmAttivi a
    WHERE c.Film = a.Film and c.FormatoAudio = a.FormatoAudio and c.Server=a.Server and c.FormatoVideo = a.FormatoVideo
)
) UNION
(
Select *
From Contiene c
Where not exists (
	Select *
    From Visualizza a
    WHERE c.Film = a.Film and c.FormatoAudio = a.FormatoAudio and c.Server=a.Server and c.FormatoVideo = a.FormatoVideo
) 
))
Delete 
From Contiene c
Where exists (  Select *
				From filmDaEliminare a
				WHERE c.Film = a.Film and c.FormatoAudio = a.FormatoAudio and c.Server=a.Server and c.FormatoVideo = a.FormatoVideo
			 );


END$$

DELIMITER ;



-- -----------------------------------------------------
-- procedure terminaFilm
-- -----------------------------------------------------

USE `mydb`;
DROP procedure IF EXISTS `mydb`.`terminaFilm`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `terminaFilm`()
BEGIN
declare finito integer default 0;
declare quantoDura integer default 0;
declare serverAus integer default 0;
declare clienteAus integer default 0;
declare filmAus integer default 0;
declare dataAus datetime;
declare giorni datetime;
declare cursore cursor for
(
select server,cliente,data,film
from Visualizza 
where datafine is null
);
declare continue handler for not found
set finito = 1;
open cursore;
scan:       loop
			fetch cursore into serverAus,clienteAus,dataAus,filmAus;
            if finito = 1 then
            leave scan;
            end if;
            set quantoDura = 
            (
            select durata
            from Film
            where idFilm = filmAus
            );
            set giorni = DATE_ADD(dataAus, INTERVAL quantoDura MINUTE);
            
            if giorni < current_timestamp() then
            update Visualizza
            set datafine = current_timestamp()
            where film = filmAus and datafine is null and data = dataAus and cliente = clienteAus and server = serverAus;
            end if;
            end loop scan;
close cursore;
END$$

DELIMITER ;
USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Premio_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Premio_BEFORE_INSERT` BEFORE INSERT ON `Premio` FOR EACH ROW
BEGIN
		if( new.attore is not null and new.regista is not null) then
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Non è consentito avere sia un attore che un regista non nulli contemporaneamente.';
    end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Premio_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Premio_BEFORE_UPDATE` BEFORE UPDATE ON `Premio` FOR EACH ROW
BEGIN
	if( new.attore is not null and new.regista is not null) then
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Non è consentito avere sia un attore che un regista non nulli contemporaneamente.';
    end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Premio_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Premio_AFTER_INSERT` AFTER INSERT ON `Premio` FOR EACH ROW
BEGIN
declare valore integer default 0;
declare trovato integer default 0;
declare filmAux integer default 0;
declare cursore1 cursor for 
select idFilm
from Recita
where idAttore = new.attore;
declare cursore2 cursor for
select idFilm
from Film
where Regista_idRegista = new.regista;
declare continue handler for not found
set trovato = 1;
if new.attore is not null then
open cursore1;
scan1:      loop
			fetch cursore1 into filmAux;
            if trovato = 1 then
            leave scan1;
            end if;
            set valore = 
            (
            select premivinti +1
            from Film
            where idFilm = filmAux
            );
            update Film
            set premivinti = valore
            where idFilm = filmAux;
            end loop scan1;
close cursore1;
end if;
set trovato = 0;
if new.regista is not null then
open cursore2;
scan2:        loop
              fetch cursore2 into filmAux;
            if trovato = 1 then
            leave scan2;
            end if;
            set valore = 
            (
            select premivinti +1
            from Film
            where idFilm = filmAux
            );
            update Film
            set premivinti = valore
            where idFilm = filmAux;
            end loop scan2;
close cursore2;
end if;
              
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Cliente_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Cliente_BEFORE_INSERT` BEFORE INSERT ON `Cliente` FOR EACH ROW
BEGIN
	
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Abbonato_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Abbonato_BEFORE_INSERT` BEFORE INSERT ON `Abbonato` FOR EACH ROW
BEGIN
	if (	select a.idCliente
			from Abbonato a
            where   a.idCLiente = new.idCliente 
				AND a.dataScadenza > CURRENT_DATE()
                AND a.pagato = 1
			) is not null 
     then
     SIGNAL SQLSTATE '45000'SET MESSAGE_TEXT = 'Questo cliente ha gia\' un abbonamento attivo';
     end if;       
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Abbonato_BEFORE_UPDATE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Abbonato_BEFORE_UPDATE` BEFORE UPDATE ON `Abbonato` FOR EACH ROW
BEGIN
	if (	select a.idCliente
			from Abbonato a
            where   a.idCLiente = new.idCliente 
				AND a.dataScadenza > CURRENT_DATE()
                AND a.pagato = 1
			) is not null 
     then
     SIGNAL SQLSTATE '45000'SET MESSAGE_TEXT = 'Questo cliente ha gia\' un abbonamento attivo';
     end if;       

END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Connessione_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Connessione_BEFORE_INSERT` BEFORE INSERT ON `Connessione` FOR EACH ROW
BEGIN
	if(	(select s.disponibile
		from Ip s
        where s.ipv4 = new.ip ) != 0) then
        signal sqlstate '45000' SET MESSAGE_TEXT = 'Questo ip non e\' al momento disponibile';
    end if;    
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Contiene_BEFORE_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Contiene_BEFORE_INSERT` BEFORE INSERT ON `Contiene` FOR EACH ROW
BEGIN
declare pesantezza integer default 0;
declare banda integer default 0;
declare capMax integer default 0;
declare filmContenuto integer;

set pesantezza =
(
	select f.peso
	from FilmConFormato f
	where f.film = new.film and f.formatoAudio = new.formatoAudio and f.formatoVideo = new.formatoVideo
);
set banda = 
(
select s.larghezzaBanda
from Server s
where s.idServer = new.server
);
set capMax =
(
select s.capacitaTrasmissioneMax
from Server s
where s.idServer = new.server	
);
set filmContenuto = 
(
	Select c.Film
    from Contiene c
    where c.Server = new.Server and c.Film = new.Film and c.FormatoAudio = new.FormatoAudio and c.FormatoVideo = new.FormatoVideo
    
);
if filmContenuto is not null then
signal sqlstate '45000' SET MESSAGE_TEXT = 'Film gia contenuto nel server';
end if;
if (banda + pesantezza) <= capMax  then
update Server
set larghezzaBanda = banda+pesantezza
where idServer = new.Server;
else
signal sqlstate '45000' SET MESSAGE_TEXT = 'Server al momento pieno';
end if;
END$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Contiene_BEFORE_DELETE` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Contiene_BEFORE_DELETE` BEFORE DELETE ON `Contiene` FOR EACH ROW
BEGIN
declare rimanente integer default 0;
declare pesantezza integer default 0;
set pesantezza =
(
select f.peso
from FilmConFormato f
where f.film = old.film and f.formatoAudio = old.formatoAudio and f.formatoVideo = old.formatoVideo
);
set rimanente = 
(
select s.larghezzaBanda
from Server s
where s.idServer = old.server
);
update Server
set larghezzaBanda = rimanente-pesantezza
where idServer = old.Server;
END$$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`Visualizza_BEFORE_INSERT` $$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Visualizza_BEFORE_INSERT` BEFORE INSERT ON `Visualizza` FOR EACH ROW
BEGIN
declare quanti integer default 0;
set quanti =
(
select count(*)
from Visualizza v
where v.Cliente = new.Cliente and v.datafine is null
);
if quanti > 0 then
signal sqlstate '45000' SET MESSAGE_TEXT = 'Questo utente sta gia\' guardando un film';
end if;
END $$

-- Creazione Functions
USE `mydb`$$
DROP FUNCTION IF EXISTS `mydb`.`puoVedere` $$
CREATE DEFINER=`root`@`localhost` FUNCTION `puoVedere`(cliente integer, peso integer, ore integer) RETURNS int
    DETERMINISTIC
BEGIN
declare dataInizio datetime;
declare nomeAbbonamento varchar(10);
declare maxOre integer default 0;
declare maxGiga integer default 0;
declare oreViste integer default 0;
declare gigaVisti integer default 0;
set dataInizio = (
					Select a.dataInizio
                    From Abbonato a
                    Where a.idCliente = cliente and a.dataScadenza > current_timestamp() and a.pagato = 1
                    limit 1
                );
set nomeAbbonamento = (
					Select a.nomeAbbonamento
                    From Abbonato a
                    Where a.idCliente = cliente and a.dataScadenza > current_timestamp() and a.pagato = 1
                    Limit 1
                );     
set maxOre = ( Select a.maxOre
				From Abbonamento a
                Where a.nome = nomeAbbonamento
				);
set maxGiga = ( Select a.maxGiga
				From Abbonamento a
                Where a.nome = nomeAbbonamento
                Limit 1
				);      
set gigaVisti =(	Select SUM(f.peso) 
					From Visualizza v natural join FilmConFormato f
					Where v.Cliente = cliente and v.data > dataInizio 
				);
set oreViste = (
					Select SUM(timediff( v.dataFine, v.data)/60)
					From Visualizza v 
					Where v.Cliente = cliente and v.data > dataInizio 
                    Limit 1
			);
    IF oreViste is NULL then
		SET oreViste = 0;
    END IF;
	IF gigaVisti is NULL then
		SET gigaVisti = 0;
    END IF;
    IF(oreViste+ore<=maxOre*60 and gigaVisti+peso <= maxGiga*1024) then        
		RETURN 1;
    else
		RETURN 0;
    END IF;    
END $$


USE `mydb`$$
DROP FUNCTION IF EXISTS `mydb`.`trovaServer` $$
CREATE DEFINER=`root`@`localhost` FUNCTION `trovaServer`(cliente integer,film integer, formA varchar(15), formV varchar (15), peso integer) RETURNS int
    DETERMINISTIC
BEGIN
declare serverA integer default 0;
set serverA = 
(	Select F.idServer
	From (
	Select D.idServer, rank() over (order by+ D.distanza)
	From (
	(
    select s.idServer, d.distanza
	from  Cliente c inner join Dista d on c.idAreaGeografica = d.idAreaGeograficaA
			inner join Server s on d.idAreaGeograficaB = s.AreaGeografica_idAreaGeografica 
	where c.idCliente = cliente and s.larghezzaBanda + peso < s.capacitaTrasmissioneMax AND s.idServer not in (	Select g.Server
																												from Contiene g
                                                                                                                where g.Film = film AND g.FormatoAudio = formA AND g.FormatoVideo = formV 
																												)
	)
    UNION
    (
		select s.idServer, d.distanza
		from  Cliente c inner join Dista d on c.idAreaGeografica = d.idAreaGeograficaA
				inner join Server s on d.idAreaGeograficaB = s.AreaGeografica_idAreaGeografica 
		where c.idCliente = cliente AND s.idServer in (	Select g.Server
														from Contiene g
														where g.Film = film AND g.FormatoAudio = formA AND g.FormatoVideo = formV 
															)
    )
			) as D
	limit 1
    ) AS F
);
RETURN serverA;
END $$


USE `mydb`$$
DROP FUNCTION IF EXISTS `mydb`.`trovaIp` $$
CREATE DEFINER=`root`@`localhost` FUNCTION `trovaIp`(clien INTEGER) RETURNS varchar(17) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
    DECLARE finito INTEGER DEFAULT 0;
    DECLARE ip_found VARCHAR(17) DEFAULT '';

    DECLARE cursore CURSOR FOR
        SELECT i.ipv4
        FROM Cliente c
        INNER JOIN Dista d ON c.idAreaGeografica = d.idAreaGeograficaA
        INNER JOIN Ip i ON d.idAreaGeograficaB = i.AreaGeografica_idAreaGeografica
        WHERE c.idCliente = clien AND i.disponibile = 0
        ORDER BY d.distanza
        LIMIT 1;

    DECLARE CONTINUE HANDLER FOR NOT FOUND
        SET finito = 1;

    OPEN cursore;

    FETCH cursore INTO ip_found;

    CLOSE cursore;

    RETURN ip_found;
END $$


USE `mydb`$$
DROP FUNCTION IF EXISTS `mydb`.`conness` $$
CREATE DEFINER=`root`@`localhost` FUNCTION `conness`(cliente VARCHAR(45)) RETURNS int
    DETERMINISTIC
BEGIN
    DECLARE quanti INTEGER DEFAULT 0;
    
    SET quanti = (
        SELECT COUNT(*)
        FROM Connessione
        WHERE idCliente = cliente AND dataFine IS NULL
    );
    
    IF quanti = 0 THEN
        RETURN 0;
    ELSE
        RETURN 1;
    END IF;
END$$


USE `mydb`$$
DROP FUNCTION IF EXISTS `mydb`.`SUMFilmDaInserire2` $$
CREATE DEFINER=`root`@`localhost` FUNCTION `SUMFilmDaInserire2`(idClienteIN integer) RETURNS int DETERMINISTIC
BEGIN
declare somma integer default 0;
declare posso integer default 0;


set posso = (

with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

		select count(*)
        From 
		((Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)) as H



);
if posso != 0 then
set somma = 
(
	
with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
		ClassificaTipologia as (
Select f.Tipologia_Genere, count(*) as nVolte, sum(recensione) as sommaVoti, (	Select D.Media
																				From 
																						(	select k.Tipologia_Genere, sum(v.recensione)/count(*) as Media
																							From VisualizzaNumero v inner join Film k on k.idFilm = v.Film
																													inner join Tipologia t on t.Genere = k.Tipologia_Genere 
																							Where v.Cliente = idClienteIN 
                                                                                            and v.recensione is not NULL 
																							Group by k.Tipologia_Genere
																						) as D
																				where D.Tipologia_Genere = f.Tipologia_Genere
																			  ) as MediaVotiNotNULL
From VisualizzaNumero v inner join Film f on f.idFilm = v.Film
						inner join Tipologia t on t.Genere = f.Tipologia_Genere 
Where v.Cliente = idClienteIN
Group by f.Tipologia_Genere
),

	RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, g.peso, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

		select SUM(H.peso)
        From 
		((Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo, r.peso
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 0,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
							
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo, r.peso
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 1,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)
		UNION
		(
		Select G.idFilm, h.titolo, r.formatoAudio, r.formatoVideo, r.peso
		From 	(	Select f.idFilm
					From FilmVisibili f 
					Where f.Tipologia_Genere =  (	Select c.Tipologia_Genere
													From ClassificaTipologia c
													order by c.MediaVotiNotNULL desc
													limit 2,1
												)
					group by f.idFilm
					) as G inner join RankFormati r on G.idFilm = r.Film 
											inner join Film h on G.idFilm = h.idFilm
		Where r.Riga = 1 and h.idFilm not in (Select v.Film	From VisualizzaNumero v Where v.Cliente = idClienteIN)
		LIMIT 3
		)) as H

);
else 
set somma = (
with FilmVisibili as (
Select f.idFilm, f.titolo, f.rating, f.Tipologia_Genere, g.FormatoAudio, g.FormatoVideo, g.dataRilascio
From Film f inner join FilmConFormato g on f.idFilm = g.Film 
			inner join Tipologia k on f.Tipologia_Genere = k.Genere
			inner join PuoVedereTipologia t on f.Tipologia_Genere = t.Genere
            inner join Abbonato a on t.nomeAbbonamento = a.nomeAbbonamento
            inner join Cliente c on c.idCliente = a.idCliente 
Where 	a.idCliente = idClienteIN 
		and f.Prodotto in ( Select h.idAreaGeografica 
							From PuoVedereAreaGeografica h
                            Where h.nomeAbbonamento = a.nomeAbbonamento
						  )
		and ((k.etaMinima is not null and c.eta >= k.etaMinima) or k.etaMinima is NULL)
		
),
RankFormati AS (
		SELECT g.Film, g.FormatoAudio, g.FormatoVideo, g.peso, ROW_NUMBER() OVER (PARTITION BY g.Film ORDER BY g.dataRilascio ASC) AS Riga
		FROM FilmConFormato g INNER JOIN (
											SELECT f.Film, MAX(f.dataRilascio) AS MaxDate
											FROM FilmConFormato f
											GROUP BY f.Film
										) AS D ON g.Film = D.Film AND g.dataRilascio = D.MaxDate
)

Select SUM(H.peso)
From (
Select h.idFilm, r.FormatoAudio, r.FormatoVideo, r.peso
From (	Select distinct f.idFilm, f.rating
		From FilmVisibili f
	) as F  inner join RankFormati r on F.idFilm = r.Film
			inner join Film h on h.idFilm = F.idFilm
Where r.Riga = 1 and F.idFilm not in (Select v.Film From VisualizzaNumero v where v.Cliente = idClienteIN)
order by h.rating DESC
limit 5) as H
);

end if;
RETURN somma;

END $$

-- Creazione eventi

USE `mydb`$$
DROP EVENT IF EXISTS `mydb`.`Rating` $$

CREATE DEFINER=`root`@`localhost` EVENT `Rating`
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    CALL RatingAusiliaria();
END$$

USE `mydb`$$
DROP EVENT IF EXISTS `mydb`.`SvuotaServer` $$

CREATE DEFINER=`root`@`localhost` EVENT `SvuotaServer`
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    CALL SvuotaServerAus();
END $$


USE `mydb`$$
DROP EVENT IF EXISTS `mydb`.`timerFilm` $$

CREATE DEFINER=`root`@`localhost` EVENT `timerFilm`
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    CALL terminaFilm;
END $$



DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


